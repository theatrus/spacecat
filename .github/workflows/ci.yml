name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on non-Linux to reduce CI time
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Check compilation
        run: cargo check --verbose

      - name: Run tests
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Exclude windows_service_tests on Windows GitHub runners due to permission issues
            cargo test --verbose --lib
            cargo test --verbose --test cli_integration_tests
            # Skip windows_service_tests binary entirely
          else
            cargo test --verbose
          fi
        shell: bash

      - name: Build release
        run: cargo build --release --verbose

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-lint-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lint-cargo-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check Windows service compilation (Linux cross-check)
        run: |
          # Ensure Windows service code compiles without errors on Linux (should use stubs)
          cargo check --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  windows-service:
    name: Windows Service Support
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: windows-service-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-service-cargo-
            ${{ runner.os }}-cargo-

      - name: Check Windows service compilation
        run: cargo check --verbose

      - name: Test Windows service functionality (excluding permission-required tests)
        run: |
          # Run lib tests and cli integration tests only
          cargo test --verbose --lib
          cargo test --verbose --test cli_integration_tests

      - name: Run clippy on Windows
        run: cargo clippy --all-targets -- -D warnings

      - name: Build with Windows service support
        run: cargo build --verbose

      - name: Test Windows service CLI commands (dry run)
        run: |
          # Test that the CLI accepts Windows service commands automatically on Windows
          cargo run -- --help
          echo "Testing Windows service command availability..."
          cargo run -- windows-service --help

  test-arm64:
    name: Test ARM64 Native Build
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: arm64-native-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            arm64-native-cargo-

      - name: Check compilation
        run: cargo check --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release --verbose

      - name: Verify binary architecture
        run: |
          file target/release/spacecat
          ldd target/release/spacecat || true

  test-msi-build:
    name: Test MSI Build
    runs-on: windows-latest
    # Run MSI build test on PRs or when commit message contains [msi]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-msi-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-msi-test-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cargo build --release --verbose
        env:
          RUST_BACKTRACE: 1

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.14
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe"
          $wixInstaller = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $wixUrl -OutFile $wixInstaller
          Start-Process -FilePath $wixInstaller -ArgumentList "/install", "/quiet", "/norestart" -Wait
          # Add WiX to PATH
          $env:PATH += ";${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          echo "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Test MSI build
        run: |
          Set-Location installer
          .\build-msi.ps1 -Version "0.0.0-ci" -SkipBuild
        env:
          RUST_BACKTRACE: 1

      - name: Verify MSI was created
        run: |
          if (Test-Path "installer\output\SpaceCat-0.0.0-ci-x64.msi") {
            $msiFile = Get-Item "installer\output\SpaceCat-0.0.0-ci-x64.msi"
            $sizeMB = [math]::Round($msiFile.Length / 1MB, 2)
            Write-Host "‚úÖ MSI created successfully: $($msiFile.Name) ($sizeMB MB)" -ForegroundColor Green
            Write-Host "üîç MSI build test passed - installer can be built from current code" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå MSI file not found" -ForegroundColor Red
            Get-ChildItem -Path "installer" -Recurse -Name
            exit 1
          }

      - name: Upload MSI artifact (for debugging)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-msi-build-failure
          path: |
            installer/output/
            installer/*.log
          retention-days: 7
