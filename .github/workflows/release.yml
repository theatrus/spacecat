name: Release

permissions: write-all

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: SpaceCat ${{ github.ref_name }}
          body: |
            ## SpaceCat Release ${{ github.ref_name }}
            
            ### Downloads
            - **Linux x86_64**: spacecat-linux-x86_64
            - **Linux aarch64**: spacecat-linux-aarch64  
            - **Windows x64**: spacecat-windows-x64.exe (native build)
            - **Windows Installer**: SpaceCat-${{ github.ref_name }}-x64.msi (includes service support)
            - **RPM Package**: spacecat-*.rpm (Fedora/RHEL/CentOS with systemd service)

            ### RPM Installation (Fedora/RHEL/CentOS)
            
            ```bash
            # Download and install the RPM
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/spacecat-*.rpm
            sudo dnf install ./spacecat-*.rpm
            
            # Configure the service
            sudo vim /etc/spacecat/config.json
            
            # Enable and start the service
            sudo systemctl enable --now spacecat.service
            ```
            
            See [CLAUDE.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CLAUDE.md) for detailed documentation.
          draft: false
          prerelease: false

  build-linux-x64:
    name: Build Linux x86_64
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-x64-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-x64-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Strip binary
        run: strip target/release/spacecat

      - name: Prepare release asset
        run: cp target/release/spacecat spacecat-linux-x86_64
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./spacecat-linux-x86_64
          asset_name: spacecat-linux-x86_64
          asset_content_type: application/octet-stream

      - name: Get file info
        run: |
          ls -la spacecat-linux-x86_64
          file spacecat-linux-x86_64

  build-linux-arm64:
    name: Build Linux ARM64
    needs: create-release
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: arm64-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            arm64-cargo-

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Strip binary
        run: strip target/release/spacecat

      - name: Prepare release asset
        run: cp target/release/spacecat spacecat-linux-aarch64
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./spacecat-linux-aarch64
          asset_name: spacecat-linux-aarch64
          asset_content_type: application/octet-stream

      - name: Get file info
        run: |
          ls -la spacecat-linux-aarch64
          file spacecat-linux-aarch64

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt --check

  build-windows:
    name: Build Windows Binary and MSI Installer
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-msi-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-msi-
            ${{ runner.os }}-cargo-

      - name: Build Windows binary
        run: cargo build --release --verbose
        env:
          RUST_BACKTRACE: 1

      - name: Upload Windows binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/spacecat.exe
          asset_name: spacecat-windows-x64.exe
          asset_content_type: application/octet-stream

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.14
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe"
          $wixInstaller = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $wixUrl -OutFile $wixInstaller
          Start-Process -FilePath $wixInstaller -ArgumentList "/install", "/quiet", "/norestart" -Wait
          # Add WiX to PATH
          $env:PATH += ";${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          echo "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Extract version from tag
        id: get_version
        run: |
          $version = "${{ github.ref_name }}".TrimStart('v')
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "::set-output name=version::$version"

      - name: Build MSI package
        run: |
          Set-Location installer
          .\build-msi.ps1 -Version $env:VERSION -SkipBuild

      - name: Upload MSI to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./installer/output/SpaceCat-${{ steps.get_version.outputs.version }}-x64.msi
          asset_name: SpaceCat-${{ steps.get_version.outputs.version }}-x64.msi
          asset_content_type: application/x-msi

      - name: Upload MSI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ./installer/output/*.msi

  build-rpm:
    name: Build RPM Package
    needs: create-release
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    
    steps:
      - name: Install build dependencies
        run: |
          dnf update -y
          dnf install -y rpm-build rpm-devel rust cargo systemd-rpm-macros \
                         openssl-devel git tar gzip make

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building RPM version: $VERSION"

      - name: Create RPM build environment
        run: |
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

      - name: Build Rust binary
        run: |
          export RUST_BACKTRACE=1
          cargo build --release --verbose

      - name: Create source tarball
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          TEMP_DIR=$(mktemp -d)
          SOURCE_DIR="$TEMP_DIR/spacecat-$VERSION"
          
          mkdir -p "$SOURCE_DIR"
          cp -r . "$SOURCE_DIR/"
          
          # Remove build artifacts and development files
          rm -rf "$SOURCE_DIR/target"
          rm -rf "$SOURCE_DIR/.git"
          rm -f "$SOURCE_DIR/.gitignore"
          rm -f "$SOURCE_DIR"/*.jpg "$SOURCE_DIR"/*.png
          
          cd "$TEMP_DIR"
          tar -czf ~/rpmbuild/SOURCES/spacecat-$VERSION.tar.gz spacecat-$VERSION
          
          # Clean up
          rm -rf "$TEMP_DIR"

      - name: Copy spec file
        run: |
          cp packaging/rpm/spacecat.spec ~/rpmbuild/SPECS/

      - name: Build RPM
        run: |
          cd ~/rpmbuild
          rpmbuild -ba SPECS/spacecat.spec

      - name: List built packages
        run: |
          echo "Built packages:"
          find ~/rpmbuild/RPMS -name "*.rpm" -type f
          find ~/rpmbuild/SRPMS -name "*.rpm" -type f

      - name: Get RPM file info
        id: rpm_info
        run: |
          RPM_FILE=$(find ~/rpmbuild/RPMS -name "spacecat-*.rpm" -type f | head -n1)
          if [ -n "$RPM_FILE" ]; then
            echo "RPM_FILE=$RPM_FILE" >> $GITHUB_OUTPUT
            echo "RPM_NAME=$(basename $RPM_FILE)" >> $GITHUB_OUTPUT
            rpm -qip "$RPM_FILE"
            cp "$RPM_FILE" ./
          fi

      - name: Upload RPM to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ steps.rpm_info.outputs.RPM_NAME }}
          asset_name: ${{ steps.rpm_info.outputs.RPM_NAME }}
          asset_content_type: application/x-rpm

      - name: Get SRPM file info
        id: srpm_info
        run: |
          SRPM_FILE=$(find ~/rpmbuild/SRPMS -name "spacecat-*.src.rpm" -type f | head -n1)
          if [ -n "$SRPM_FILE" ]; then
            echo "SRPM_FILE=$SRPM_FILE" >> $GITHUB_OUTPUT
            echo "SRPM_NAME=$(basename $SRPM_FILE)" >> $GITHUB_OUTPUT
            cp "$SRPM_FILE" ./
          fi

      - name: Upload SRPM to release
        if: steps.srpm_info.outputs.SRPM_FILE != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ steps.srpm_info.outputs.SRPM_NAME }}
          asset_name: ${{ steps.srpm_info.outputs.SRPM_NAME }}
          asset_content_type: application/x-rpm
