name: Release

permissions: write-all

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: SpaceCat ${{ github.ref_name }}
          body: |
            ## SpaceCat Release ${{ github.ref_name }}
            
            ### Downloads
            - **Linux x86_64**: spacecat-linux-x86_64
            - **Linux aarch64**: spacecat-linux-aarch64  
            - **Windows x64**: spacecat-windows-x64.exe (native build)
            - **Windows Installer**: SpaceCat-${{ github.ref_name }}-x64.msi (includes service support)
            
            ### Features
            - Astronomical observation system for SpaceCat API
            - Real-time event and image monitoring
            - Discord webhook integration
            - Mount information and meridian flip tracking
            - Autofocus analysis and reporting
            - **Windows service support** (automatically available on Windows)
            
            See [CLAUDE.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CLAUDE.md) for detailed documentation.
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: spacecat
            asset_name: spacecat-linux-x86_64
            
          # Linux aarch64 (ARM64)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: spacecat
            asset_name: spacecat-linux-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation environment
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary (Linux only)
        run: |
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)
              strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
              ;;
            aarch64-unknown-linux-gnu)
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
              ;;
          esac

      - name: Prepare release asset
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Get file info
        run: |
          ls -la ${{ matrix.asset_name }}
          file ${{ matrix.asset_name }}

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt --check

  build-windows:
    name: Build Windows Binary and MSI Installer
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-msi-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-msi-
            ${{ runner.os }}-cargo-

      - name: Build Windows binary
        run: cargo build --release --verbose
        env:
          RUST_BACKTRACE: 1

      - name: Upload Windows binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/spacecat.exe
          asset_name: spacecat-windows-x64.exe
          asset_content_type: application/octet-stream

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.14
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe"
          $wixInstaller = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $wixUrl -OutFile $wixInstaller
          Start-Process -FilePath $wixInstaller -ArgumentList "/install", "/quiet", "/norestart" -Wait
          # Add WiX to PATH
          $env:PATH += ";${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          echo "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Extract version from tag
        id: get_version
        run: |
          $version = "${{ github.ref_name }}".TrimStart('v')
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "::set-output name=version::$version"

      - name: Build MSI package
        run: |
          Set-Location installer
          .\build-msi.ps1 -Version $env:VERSION -SkipBuild

      - name: Upload MSI to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./installer/output/SpaceCat-${{ steps.get_version.outputs.version }}-x64.msi
          asset_name: SpaceCat-${{ steps.get_version.outputs.version }}-x64.msi
          asset_content_type: application/x-msi

      - name: Upload MSI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ./installer/output/*.msi
